Authentication is the process of determining a user's identity.
Authorization is the process of determining whether a user has access to a resource. In ASP.NET Core, authentication is handled by the IAuthenticationService,
which is used by authentication middleware. The authentication service uses registered authentication handlers to complete authentication-related actions.
Examples of authentication-related actions include:
Authenticating a user.
Responding when an unauthenticated user tries to access a restricted resource.

The registered authentication handlers and their configuration options are called "schemes".
Authentication schemes are specified by registering authentication services in Startup.ConfigureServices:
By calling a scheme-specific extension method after a call to services.AddAuthentication (such as AddJwtBearer or AddCookie, for example). These extension methods use AuthenticationBuilder.AddScheme to register schemes with appropriate settings.
Less commonly, by calling AuthenticationBuilder.AddScheme directly.

The Authentication middleware is added in Startup.Configure by calling the UseAuthentication extension method on the app's IApplicationBuilder. Calling UseAuthentication registers the middleware which uses the previously registered authentication schemes. Call UseAuthentication before any middleware that depends on users being authenticated. When using endpoint routing, the call to UseAuthentication must go:

After UseRouting, so that route information is available for authentication decisions.
Before UseEndpoints, so that users are authenticated before accessing the endpoints.

An authentication scheme is a name which corresponds to:

An authentication handler.
Options for configuring that specific instance of the handler.
An authentication handler:
Is a type that implements the behavior of a scheme.
Is derived from IAuthenticationHandler or AuthenticationHandler<TOptions>.
Has the primary responsibility to authenticate users.

Based on the authentication scheme's configuration and the incoming request context, authentication handlers:
Construct AuthenticationTicket objects representing the user's identity if authentication is successful.
Return 'no result' or 'failure' if authentication is unsuccessful.
Have methods for challenge and forbid actions for when users attempt to access resources:
They are unauthorized to access (forbid).
When they are unauthenticated (challenge).

An authentication scheme's authenticate action is responsible for constructing the user's identity based on request context.
It returns an AuthenticateResult indicating whether authentication was successful and, if so, the user's identity in an authentication ticket.
Authenticate examples include:

A cookie authentication scheme constructing the user's identity from cookies.
A JWT bearer scheme deserializing and validating a JWT bearer token to construct the user's identity.
An authentication challenge is invoked by Authorization when an unauthenticated user requests an endpoint that requires authentication
An authentication scheme's forbid action is called by Authorization when an authenticated user attempts to access a resource they are not permitted to access.

ASP.NET Core Identity:

Is an API that supports user interface (UI) login functionality.
Manages users, passwords, profile data, roles, claims, tokens, email confirmation, and more.
Identity is typically configured using a SQL Server database to store user names, passwords, and profile data. Alternatively, another persistent store can be used, for example, Azure Table Storage.

This controller would be only accessible by users who are members of the HRManager role or the Finance role.
[Authorize(Roles = "HRManager,Finance")]
public class SalaryController : Controller
{
}

[Authorize(Roles = "PowerUser")]
[Authorize(Roles = "ControlPanelUser")]
public class ControlPanelController : Controller
{
}
If you apply multiple attributes then an accessing user must be a member of all the roles specified; the following sample requires that a user must be a member of both the PowerUser and ControlPanelUser role.
When an identity is created it may be assigned one or more claims issued by a trusted party. A claim is a name value pair that represents what the subject is, not what the subject can do. 