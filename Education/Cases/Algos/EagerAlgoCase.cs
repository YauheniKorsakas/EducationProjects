using Education.Core;
using System.Collections.Generic;
using System.Threading.Tasks;

namespace Education.Cases.Algos
{
    public class EagerAlgoCase : ICase
    {
        public Task RunAsync() {
            ExecuteCustomAlgo();
            return Task.CompletedTask;
        }

        private void ExecuteCustomAlgo() {
            var hashSet = new HashSet<int>();
            hashSet.ExceptWith(new int[] { 1, 2, 3 });
            hashSet.UnionWith(new int[] { 1, 2, 3 });
        }
    }
}

// Жадные алгоритмы - выбираем на кажджом шаге оптимальное решение и в итоге получим глобальное оптимальное решение.
// (на каждом шаге выбираем самое оптимальное)
// Жадные алгоритмы не всегда оптимальны, зато их решение приближенное к оптимальному.
// HashSet - реализация множеств на C#.
// Для задачи о покрытии множества надо решить задачу о покрытии каждого подмножества. Задача о комивояжоре - жадный алгоритм.
// Факториальная зависимость - у комивояжора нельзя вычислить оптимальный маршрут за приемлемое время
// NP полная задача - для нее не существует оптимальных быстрых решений.
// Для NP полной задачи можно юзнуть приближенные алгоритмы (жадные)

// Захешированая строка хранится в базе, можно получить только хеш по строке, но строку по хешу нельзя получить.